import os

import joblib
from flask import Flask, request, render_template
from sentence_transformers import SentenceTransformer

from src.ml.ml_utils import search_in_doc

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Flask
app = Flask(__name__)
base_path = "../ml/model/"

# === –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ ===
# –ï—Å–ª–∏ –º–æ–¥–µ–ª—å —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ ‚Äî –∑–∞–≥—Ä—É–∂–∞–µ–º –µ—ë
model_path = os.path.join(base_path, "semantic_search_model")

if os.path.exists(model_path):
    model = SentenceTransformer(model_path)
    print("‚úÖ –õ–æ–∫–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞.")
else:
    model = SentenceTransformer('paraphrase-multilingual-MiniLM-L12-v2')
    print("‚ö†Ô∏è –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞.")
    os.makedirs(base_path, exist_ok=True)
    model.save(model_path)
    print(f"üíæ –ú–æ–¥–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ {model_path}")

# === –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ ===
search_results_path = os.path.join(base_path, "search_results.pkl")
search_results = joblib.load(search_results_path)


# === –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ ===
@app.route("/")
def index():
    return render_template("index.html")


# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ ===
@app.route("/predict", methods=["POST"])
def predict():
    text = request.form.get("text", "").strip()
    phrase = request.form.get("phrase", "").strip()

    if not text or not phrase:
        return render_template("index.html", result="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∏ —Ñ—Ä–∞–∑—É.", text=text, phrase=phrase)

    result = search_in_doc(text, phrase, model)

    # –ü—Ä–æ–≤–µ—Ä–∏–º, –±—ã–ª –ª–∏ –Ω–∞–π–¥–µ–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if result["matched_word"]:
        result_display = (
            f"üîç –ù–∞–π–¥–µ–Ω–æ —Å–ª–æ–≤–æ: <b>{result['matched_word']}</b><br>"
            f"üìç –ü–æ–∑–∏—Ü–∏—è: {result['positions']}<br>"
            f"üß† –ö–æ—Å–∏–Ω—É—Å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {round(result['distance'], 3)}"
        )
    else:
        result_display = "üö´ –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ (—Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –∏–ª–∏ –Ω–µ–ø–æ–¥—Ö–æ–¥—è—â–∏–π –∑–∞–ø—Ä–æ—Å)."

    return render_template("index.html", result=result_display, text=text, phrase=phrase)


# === –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏ ===
@app.route("/metrics")
def metrics():
    metrics_path = os.path.join(base_path, "search_metrics.pkl")
    if os.path.exists(metrics_path):
        search_metrics = joblib.load(metrics_path)
    else:
        search_metrics = {"error": "–ú–µ—Ç—Ä–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –º–æ–¥–µ–ª—å–Ω–æ–µ —è–¥—Ä–æ."}

    return render_template(
        "metrics.html",
        search_metrics=search_metrics,
        search_results=search_results
    )


if __name__ == "__main__":
    app.run(debug=True, port=8081)
